name: Build and Deploy Note-Gin

on:
  push:
    branches: [ "master", "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:
    inputs:
      deployMessage:
        description: 'Deployment message'
        required: true
        default: 'Manual deployment triggered'
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: docker.io
  IMAGE_NAME: vino2snax/note-gin

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: root
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            # 停止并删除旧容器
            docker stop note-gin-staging || true
            docker rm note-gin-staging || true
            
            # 拉取最新镜像
            docker pull docker.1ms.run/${{ env.IMAGE_NAME }}:master-${{ github.sha }}
            
            # 启动新容器
            docker run -d \
              --name note-gin-staging \
              --restart unless-stopped \
              -p 9000:9000 \
              -e SERVER_MODE=release \
              -v /note-gin/staging/config:/app/config/file \
              -v /note-gin/staging/data:/app/data \
              --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:9000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=3s \
              --health-retries=3 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${{ github.sha }}
            
            # 清理旧镜像
            docker image prune -f
